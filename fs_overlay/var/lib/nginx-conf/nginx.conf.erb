# This file will be compiled into /etc/nginx/nginx.conf

user  nginx;
worker_processes  <%= ENV['WORKER_PROCESSES'] || 1 %>;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  <%= ENV['WORKER_CONNECTIONS'] || 1024 %>;
}

# config to don't allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    <% if ENV['WEBSOCKET'] && ENV['WEBSOCKET'].downcase == 'true' %>
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    <% end %>

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  <%= ENV['KEEPALIVE_TIMEOUT'] || 65 %>;

    gzip  <%= ENV['GZIP'] || 'on' %>;
    server_tokens <%= ENV['SERVER_TOKENS'] || 'off' %>;

    server_names_hash_max_size <%= ENV['SERVER_NAMES_HASH_MAX_SIZE'] || 512 %>;
    <% if ENV['SERVER_NAMES_HASH_BUCKET_SIZE'] %>
    server_names_hash_bucket_size <%= ENV['SERVER_NAMES_HASH_BUCKET_SIZE'] %>;
    <% end %>
    <% if ENV['CLIENT_MAX_BODY_SIZE'] %>
    client_max_body_size <%= ENV['CLIENT_MAX_BODY_SIZE'] %>;
    <% end %>

    include /etc/nginx/conf.d/*.conf;
}
